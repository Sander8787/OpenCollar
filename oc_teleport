/*
THIS FILE IS HEREBY RELEASED UNDER THE Public Domain
This script is released public domain, unlike other OC scripts for a specific and limited reason, because we want to encourage third party plugin creators to create for OpenCollar and use whatever permissions on their own work they see fit.  No portion of OpenCollar derived code may be used excepting this script,  without the accompanying GPLv2 license.
-Authors Attribution-
Aria (tiff589) - (July 2018-December 2019)
roan (Silkie Sabra) - (September 2018)
*/

////////////////////////////////////////////
string g_sParentMenu = "Apps";
string g_sSubMenu = "Teleport";
//global_checkboxes=▢,▣ 
list lMenuOptions = ["▢ SimLock", "▣ SimLock", "▢ Exact Pos", "▣ Exact Pos", "Follow Me" ];

integer simLockActivated = 0;
integer exactPosActivated = 0;


//query to get sim lock data//
key getSimLock = NULL_KEY;
key simChangeCheck = NULL_KEY;

string simLockPos = "";
string curSimLockPos = "";

list tp_history = [];

string homePos = "262144,267520,0,19,125,69";
//"262163/267645/70"; //set to social island for now!



//http to get target av data//
string url = "https://sldb.app/";
key http_request_id;

//target avatar key and position
key targetAvKey = NULL_KEY;
string targetAvPos = "";
string targetAvPosBlocked = "";

//moveTarget
vector moveTarget = ZERO_VECTOR;
///////////////////////////////////////////////////

//MESSAGE MAP
//integer CMD_ZERO = 0;
integer CMD_OWNER = 500;
//integer CMD_TRUSTED = 501;
//integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
//integer CMD_EVERYONE = 504;
//integer CMD_RLV_RELAY = 507;
//integer CMD_SAFEWORD = 510;
//integer CMD_RELAY_SAFEWORD = 511;

//integer NOTIFY = 1002;
integer REBOOT = -1000;

//integer LM_SETTING_SAVE = 2000;//scripts send messages on this channel to have settings saved
//str must be in form of "token=value"
integer LM_SETTING_REQUEST = 2001;//when startup, scripts send requests for settings on this channel
integer LM_SETTING_RESPONSE = 2002;//the settings script sends responses on this channel
integer LM_SETTING_DELETE = 2003;//delete token from settings
//integer LM_SETTING_EMPTY = 2004;//sent when a token has no value

integer MENUNAME_REQUEST = 3000;
integer MENUNAME_RESPONSE = 3001;
//integer MENUNAME_REMOVE = 3003;

//integer RLV_CMD = 6000;
//integer RLV_REFRESH = 6001;//RLV plugins should reinstate their restrictions upon receiving this message.

//integer RLV_OFF = 6100; // send to inform plugins that RLV is disabled now, no message or key needed
//integer RLV_ON = 6101; // send to inform plugins that RLV is enabled now, no message or key needed

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
string UPMENU = "BACK";
//string ALL = "ALL";

Dialog(key kID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_SET, DIALOG, (string)kID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [kID]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kID, kMenuID, sName];
}

Menu(key kID, integer iAuth) {
    string sPrompt = "\n[Menu App]";
    list lButtons = [ llList2String(lMenuOptions,simLockActivated),llList2String(lMenuOptions,exactPosActivated+2), llList2String(lMenuOptions,4) ]; //change this to on/off sim lock ▣
    Dialog(kID, sPrompt, lButtons, [UPMENU], 0, iAuth, "Menu~Main");
}

UserCommand(integer iNum, string sStr, key kID) {
    if (iNum<CMD_OWNER || iNum>CMD_WEARER) return;
    if (llSubStringIndex(llToLower(sStr),llToLower(g_sSubMenu)) && llToLower(sStr) != "menu "+llToLower(g_sSubMenu)) return;
    if (iNum == CMD_OWNER && llToLower(sStr) == "runaway") {
        g_lOwner=[];
        g_lTrust=[];
        g_lBlock=[];
        return;
    }
    if (llToLower(sStr)==llToLower(g_sSubMenu) || llToLower(sStr) == "menu "+llToLower(g_sSubMenu)) Menu(kID, iNum);
    //else if (iNum!=CMD_OWNER && iNum!=CMD_TRUSTED && kID!=g_kWearer) RelayNotify(kID,"Access denied!",0);
    else {
        //integer iWSuccess = 0; 
        //string sChangetype = llList2String(llParseString2List(sStr, [" "], []),0);
        //string sChangevalue = llList2String(llParseString2List(sStr, [" "], []),1);
        //string sText;
        /// [prefix] g_sSubMenu sChangetype sChangevalue
    }
}

key g_kWearer;
list g_lMenuIDs;
integer g_iMenuStride;
list g_lOwner;
list g_lTrust;
list g_lBlock;
integer g_iLocked=FALSE;

integer ALIVE = -55;
integer READY = -56;
integer STARTUP = -57;
default
{
    on_rez(integer iNum){
        llResetScript();
    }
    state_entry(){
        llMessageLinked(LINK_SET, ALIVE, llGetScriptName(),"");
    }
    link_message(integer iSender, integer iNum, string sStr, key kID){
        if(iNum == REBOOT){
            if(sStr == "reboot"){
                llResetScript();
            }
        } else if(iNum == READY){
            llMessageLinked(LINK_SET, ALIVE, llGetScriptName(), "");
        } else if(iNum == STARTUP){
            state active;
        }
    }
}
state active
{
    on_rez(integer t){
        if(llGetOwner()!=g_kWearer) llResetScript();
    }
    state_entry()
    {
        g_kWearer = llGetOwner();
        llMessageLinked(LINK_SET, LM_SETTING_REQUEST, "global_locked","");
        

        llSetTimerEvent(5.0);

    }

    timer()
    {
        //every 5 seconds, check the online database to see if the owner's location has changed//
        if( targetAvKey != NULL_KEY )
        {
            http_request_id=llHTTPRequest(url+llEscapeURL((string)targetAvKey)+"/tp", [HTTP_METHOD, "GET"], "");
        }

        if(moveTarget != ZERO_VECTOR)
        {
            if( llVecDist(moveTarget,llGetPos()) <= 5.0 )
            {
                llStopMoveToTarget();
                moveTarget=ZERO_VECTOR;
            }
        }
    }
    http_response(key request_id, integer status, list metadata, string data)
    {
        //online dataserver response with owner's location data//
        if (request_id == http_request_id)
        {
            //llOwnerSay( " location data... " + data );

            if( targetAvPos == "") //the script has reset, do not do anything//
            {
                targetAvPos = data;
            }
            else
            {
                if( targetAvPos != data ) //location data is different than last..
                {
                    //llOwnerSay( data );

                    //llOwnerSay( data + " -== blocked = " + targetAvPosBlocked  );

                    if( targetAvPosBlocked != data ) //do not save targetAvPos is it is this data's sim position
                    {
                        targetAvPos = data;
                    
                        list targetSimPos = llParseString2List(data,[","],[""]);
                        string data = (string)(llList2Integer(targetSimPos,0)+llList2Integer(targetSimPos,3))+"/"+(string)(llList2Integer(targetSimPos,1)+llList2Integer(targetSimPos,4))+"/"+(string)(llList2Integer(targetSimPos,3)+llList2Integer(targetSimPos,5));

                        //llOwnerSay("follow tp to: " + data );
                        //do a teleport!
                        llOwnerSay ("@tpto:"+data+"=force");

                        //llOwnerSay ("@tpto:196482/328100/23=force");

                        targetAvPosBlocked = "";
                    }

                    
                }
            }
        } 

    }

    //where the magic happen!
    changed(integer change)
    {
        if (change & CHANGED_REGION) //note that it's & and not &&... it's bitwise!
        {

            //we arrived at a new sim! check its details...
            //llOwnerSay("sim changed...");
            simChangeCheck = llRequestSimulatorData( llGetRegionName(), DATA_SIM_POS );

            //wether or not sim lock is activated, on region change, check if we are in the right region?
        }
    }
    dataserver(key query_id, string data)
    {

        //check region detail upon arrival to a new region
        if (query_id == simChangeCheck )
        {
            //llOwnerSay( "arrived at a new sim: " + llGetRegionName() + ", pos = " + llGetSubString(data, 1, -2) );

            llSleep(2);
            

            //update tp history
            tp_history =  llGetSubString(data, 1, -2) + tp_history;
            if( llGetListLength( tp_history ) > 4 ) tp_history = llDeleteSubList( tp_history, -1,-1 );

            //llOwnerSay( "tp history ==> " + llDumpList2String(tp_history," |-| ") );


            if( llList2String(tp_history,0) == llList2String(tp_history,1) && llList2String(tp_history,1) == llList2String(tp_history,2) && llList2String(tp_history,2) == llList2String(tp_history,3)  )
            {
                if( 1==1 )
                {
                    llOwnerSay( "MANY TP ATTEMPTS FAILED -- GO HOME!! " );
                    //llOwnerSay( "BAN THIS SIM == " + llGetRegionName() + ", pos = " + llGetSubString(data, 1, -2) );
                    targetAvPosBlocked = targetAvPos;
                    targetAvPos = homePos;
                    simLockPos = homePos;
                }
            }

            //tp wearer to sim lock area
            list curSimPos = llParseString2List(llGetSubString(data, 1, -2),[","],[""]);
            list targetAvSimPos = llParseString2List(targetAvPos,[","],[""]);
            list targetLockSimPos = llParseString2List(simLockPos,[","],[""]);


            
            //I have just changed regions and I am set to follow a target//
            if( targetAvKey != NULL_KEY && targetAvPos != "" )
            {
                

                //am I in the same region as the target?
                if( llList2String(curSimPos,0) == llList2String(targetAvSimPos,0) && llList2String(curSimPos,1) == llList2String(targetAvSimPos,1) && llList2String(curSimPos,2) == llList2String(targetAvSimPos,2) )
                {
                    vector targetPos = <llList2Integer(targetAvSimPos,3),llList2Integer(targetAvSimPos,4),llList2Integer(targetAvSimPos,5)+1>;
                    
                    //llOwnerSay( (string)llGetPos() + " target -> " + (string)targetPos );
                    
                    if( llVecDist(llGetPos(), targetPos) > 10 && exactPosActivated )
                    {
                        //llOwnerSay( "Same sim... but not same place!! " + (string)llVecDist(llGetPos(), targetPos) );
                        llMoveToTarget( targetPos, 0.05 );

                        moveTarget = targetPos;
                    }
                    
                    //llOwnerSay("I am in the same sim as the av I am following!!");
                }
                else
                {
                    //am I sim locked?
                    if( simLockActivated == 1 && simLockPos != "") 
                    {
                        //yes => warp to target av//
                        simLockPos = targetAvPos;

                        //llOwnerSay( "SIMLOCK AND FOLLOW LOCK -- siml = " + simLockPos + " follow pos = " + targetAvPos );
                        llOwnerSay( "You are restricted from leaving the sim!!");
                        string data = (string)(llList2Integer(targetAvSimPos,0)+llList2Integer(targetAvSimPos,3))+"/"+(string)(llList2Integer(targetAvSimPos,1)+llList2Integer(targetAvSimPos,4))+"/"+(string)(llList2Integer(targetAvSimPos,3)+llList2Integer(targetAvSimPos,5));


                        llOwnerSay ("@tpto:"+data+"=force");
                    }
                }


            }
            //I have just changed regions and I am NOT following a target//
            //but I AM sim locked
            else if( simLockActivated == 1 && simLockPos != "") 
            {

                //is this new region the same as the locked region?
                if( llList2String(curSimPos,0) == llList2String(targetLockSimPos,0) && llList2String(curSimPos,1) == llList2String(targetLockSimPos,1) && llList2String(curSimPos,2) == llList2String(targetLockSimPos,2) )
                {
                    //I am SIMLOCKED and have arrived at the sim I need to be in
                    //but I am not at the target spot//
                    vector targetPos = <llList2Integer(targetLockSimPos,3),llList2Integer(targetLockSimPos,4),llList2Integer(targetLockSimPos,5)+1>;
                    
                    if( llVecDist(llGetPos(), targetPos) > 10 && exactPosActivated )
                    {
                        //llOwnerSay( "Same sim... but not same place!! " + (string)llVecDist(llGetPos(), targetPos) );
                        llMoveToTarget( targetPos, 0.05 );
                        moveTarget = targetPos;
                    }
                    //am I in the same position?
                    //if not llSetTarget//
                    //llOwnerSay("I am in the same sim the sim I am confined to!!");
                }
                else
                {
                    //yes => warp to target sim//
                    //llOwnerSay( "SIMLOCK ONLY -- siml = " + simLockPos + " follow pos = " + targetAvPos );
                    llOwnerSay( "You are restricted from leaving the sim!!");
                    string data = (string)(llList2Integer(targetLockSimPos,0)+llList2Integer(targetLockSimPos,3))+"/"+(string)(llList2Integer(targetLockSimPos,1)+llList2Integer(targetLockSimPos,4))+"/"+(string)(llList2Integer(targetLockSimPos,3)+llList2Integer(targetLockSimPos,5));


                    llOwnerSay ("@tpto:"+data+"=force");
                }

                

            }



        }




        //get the data to save in sim lock//
        if (query_id == getSimLock)
        {
            vector pos = llGetPos();
            simLockPos = llGetSubString(data, 1, -2) + "," +  (string)llRound(pos.x) +","+ (string)llRound(pos.y) + ","+ (string)llRound(pos.z);
        }
    }




    link_message(integer iSender,integer iNum,string sStr,key kID){
        if(iNum >= CMD_OWNER && iNum <= CMD_WEARER) UserCommand(iNum, sStr, kID);
        else if(iNum == MENUNAME_REQUEST && sStr == g_sParentMenu)
            llMessageLinked(iSender, MENUNAME_RESPONSE, g_sParentMenu+"|"+ g_sSubMenu,"");
        else if(iNum == DIALOG_RESPONSE){
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if(iMenuIndex!=-1){
                string sMenu = llList2String(g_lMenuIDs, iMenuIndex+1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex-1, iMenuIndex-2+g_iMenuStride);
                list lMenuParams = llParseString2List(sStr, ["|"],[]);
                key kAv = llList2Key(lMenuParams,0);
                string sMsg = llList2String(lMenuParams,1);
                integer iAuth = llList2Integer(lMenuParams,3);
                
                if(sMenu == "Menu~Main")
                {
                    if(sMsg == UPMENU) 
                    {
                        llMessageLinked(LINK_SET, iAuth, "menu "+g_sParentMenu, kAv);
                    }
                    else if(sMsg == "▢ Exact Pos")
                    {
                        if( llListFindList( g_lOwner, [(string)kAv] ) != -1 ) //an owner is accessing this function//
                        {
                            llOwnerSay( "Exact Position is enabled!");
                            if(kAv != llGetOwner() ) llInstantMessage( kAv, "Exact Position is enabled!");
                            exactPosActivated = 1;
                        }
                        else
                        {
                            llInstantMessage( kAv, "Only owners of this collar can change this setting!");
                        }
                        llMessageLinked(LINK_SET, iAuth, "menu "+g_sSubMenu, kAv);
                    }
                    else if(sMsg == "▣ Exact Pos")
                    {
                        if( llListFindList( g_lOwner, [(string)kAv] ) != -1 ) //an owner is accessing this function//
                        {
                            llOwnerSay( "Exact Position is disabled!");
                            if(kAv != llGetOwner() ) llInstantMessage( kAv, "Exact Position is disabled!");
                            exactPosActivated = 0;
                        }
                        else
                        {
                            llInstantMessage( kAv, "Only owners of this collar can change this setting!");
                        }
                        llMessageLinked(LINK_SET, iAuth, "menu "+g_sSubMenu, kAv);
                    }
                    else if(sMsg == "▢ SimLock")
                    {
                        if( llListFindList( g_lOwner, [(string)kAv] ) != -1 ) //an owner is accessing this function//
                        {
                            getSimLock = llRequestSimulatorData( llGetRegionName(), DATA_SIM_POS );

                            simLockActivated = 1;
                            llOwnerSay( "Sim Lock has been enabled!");
                            if(kAv != llGetOwner() ) llInstantMessage( kAv, "Sim Lock has been enabled!");
                        }
                        else
                        {
                            llInstantMessage( kAv, "Only owners of this collar can lock it's wearer on a sim!!");
                        }
                        llMessageLinked(LINK_SET, iAuth, "menu "+g_sSubMenu, kAv);
                        
                    } 
                    else if(sMsg == "▣ SimLock")
                    {
                        if( llListFindList( g_lOwner, [(string)kAv] ) != -1 ) //an owner is accessing this function//
                        {
                            simLockPos = "";

                            simLockActivated = 0;
                            llOwnerSay( "Sim Lock has been disabled!");
                            if(kAv != llGetOwner() ) llInstantMessage( kAv, "Sim Lock has been disabled!");
                        }
                        else
                        {
                            llInstantMessage( kAv, "Only owners of this collar can lock it's wearer on a sim!!");
                        }
                        llMessageLinked(LINK_SET, iAuth, "menu "+g_sSubMenu, kAv);
                    }
                    else if(sMsg == llList2String(lMenuOptions,4) )
                    {
                        
                        if( llListFindList( g_lOwner, [(string)kAv] ) != -1 ) //an owner is accessing this function//
                        {
                            if( llGetOwner() != kAv ) //someone other than you//
                            {
                                if ( targetAvKey == kAv) //the one being followed is this key
                                {
                                    targetAvKey = NULL_KEY;
                                    lMenuOptions = llListReplaceList(lMenuOptions, [ "Follow Me"], 4, 4);
                                    llOwnerSay( "No longer following anyone!" );
                                    llInstantMessage( kAv, llKey2Name(g_kWearer) + " is no longer following you!");
                                }
                                else //it is NULL_KEY or someone else, we permit taking follow from another owner//
                                {
                                    targetAvKey = kAv;
                                    lMenuOptions = llListReplaceList(lMenuOptions, [ "-" + llKey2Name(kAv)], 4, 4);
                                    llOwnerSay( "Now Following " + llKey2Name(kAv) );
                                    llInstantMessage( kAv, llKey2Name(g_kWearer) + " is now following you!");
                                }
                                
                            }
                            else
                            {
                                targetAvKey = NULL_KEY;
                                lMenuOptions = llListReplaceList(lMenuOptions, [ "Follow Me" ], 2, 2);
                                llOwnerSay( "No longer following anyone!" );
                            }

                        }
                        else
                        {
                            llInstantMessage( kAv, "Only owners of this collar can force its wearer to follow them!!");
                        }
                        llMessageLinked(LINK_SET, iAuth, "menu "+g_sSubMenu, kAv);


                    }
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  //remove stride from g_lMenuIDs
        } else if(iNum == LM_SETTING_RESPONSE){
            // Detect here the Settings
            list lSettings = llParseString2List(sStr, ["_","="],[]);
            string sToken = llList2String(lSettings,0);
            string sVar = llList2String(lSettings,1);
            string sVal = llList2String(lSettings,2);

            
            
            if(sToken=="global"){
                if(sVar=="locked"){
                    g_iLocked=(integer)sVal;
                }
            } else if(sToken == "auth"){
                if(sVar == "owner"){
                    g_lOwner = llParseString2List(sVal,[","],[]);
                    //llOwnerSay( " == GOT OWNERS === " + sVal );
                }
            }
        } else if(iNum == LM_SETTING_DELETE){
            // This is recieved back from settings when a setting is deleted
            list lSettings = llParseString2List(sStr, ["_"],[]);
            if(llList2String(lSettings,0)=="global")
                if(llList2String(lSettings,1) == "locked") g_iLocked=FALSE;
        }
        

        //llOwnerSay( "DEBUGGING === " + llDumpList2String([iSender,iNum,sStr,kID],"^"));
    }
}
